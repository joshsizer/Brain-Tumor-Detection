import React, { useState, useEffect, useCallback, useRef } from "react";
import * as tf from "@tensorflow/tfjs";

export default function HomePage() {
  const [model, setModel] = useState<tf.LayersModel | undefined>(undefined);
  const [modelLoaded, setModelLoaded] = useState<boolean>(false);
  const [imgURL, setImgURL] = useState<string | undefined>(
    "http://localhost/testing/glioma/Te-gl_0010.jpg"
  );
  const [imgLoaded, setImgLoaded] = useState<boolean>(false);
  const img = useRef<HTMLImageElement>(null);
  const [imgNum, setImgNum] = useState<number>(10);
  const [prediction, setPrediction] = useState<string | undefined>(undefined);

  const indexToLabel = useCallback((index: number) => {
    const map: { [index: number]: string } = {
      0: "glioma",
      1: "meningioma",
      2: "notumor",
      3: "pituitary",
    };
    return map[index];
  }, []);

  const doPrediction = useCallback(() => {
    if (img.current && imgLoaded) {
      let imageTensor = tf.browser.fromPixels(img.current);
      imageTensor = tf.tidy(() => {
        imageTensor = tf.image.resizeBilinear(imageTensor, [128, 128]);
        imageTensor = tf.cast(imageTensor, "float32");
        imageTensor = imageTensor.div(tf.scalar(255));
        imageTensor = imageTensor.expandDims(0);
        return imageTensor;
      });

      if (model) {
        const oneHotPred = (
          model.predict(imageTensor) as tf.Tensor<tf.Rank>
        ).dataSync();
        const maxIndex = tf.argMax(oneHotPred);
        setPrediction(indexToLabel(maxIndex.dataSync()[0]));
      }
    }
  }, [img.current, model, setPrediction, indexToLabel]);

  const loadModel = useCallback(() => {
    if (!modelLoaded) {
      tf.loadLayersModel("http://localhost/model/model.json").then((model) => {
        setModelLoaded(true);
        setModel(model);
        doPrediction();
      });
    }
  }, [setModel, doPrediction]);

  useEffect(() => {
    loadModel();
  }, [loadModel]);

  const onImgLoaded = useCallback(() => {
    setImgLoaded(true);
    console.log("Image loaded.");
    doPrediction();
  }, [imgLoaded, model, doPrediction]);

  // Sometimes, the image element and its content are loaded
  // before the page's javascript. In this case, our component
  // must do the heavy lifting of checking if the image has
  // loaded yet, since the onLoad callback will not have been
  // registered yet.
  useEffect(() => {
    const image = img.current;
    if (!imgLoaded && image && image.complete) {
      onImgLoaded();
    }
  }, [imgLoaded, img.current, onImgLoaded]);

  const changeImage = () => {
    setImgLoaded(false);
    setImgNum(imgNum + 1);
    setImgURL(`http://localhost/testing/meningioma/Te-me_00${imgNum}.jpg`);
  };

  return (
    <>
      <h1>Hello there!</h1>
      <p>The model's name is: {model?.name}</p>
      <img src={imgURL} onLoad={onImgLoaded} ref={img} />
      <p>Prediction: {prediction}</p>
      <button onClick={changeImage}>Change Image!</button>
    </>
  );
}

// export default function Home() {
//   return (
//     <div className={styles.container}>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className={styles.main}>
//         <h1 className={styles.title}>
//           Welcome to <a href="https://nextjs.org">Next.js!</a>
//         </h1>

//         <p className={styles.description}>
//           Get started by editing{" "}
//           <code className={styles.code}>pages/index.js</code>
//         </p>

//         <div className={styles.grid}>
//           <a href="https://nextjs.org/docs" className={styles.card}>
//             <h2>Documentation &rarr;</h2>
//             <p>Find in-depth information about Next.js features and API.</p>
//           </a>

//           <a href="https://nextjs.org/learn" className={styles.card}>
//             <h2>Learn &rarr;</h2>
//             <p>Learn about Next.js in an interactive course with quizzes!</p>
//           </a>

//           <a
//             href="https://github.com/vercel/next.js/tree/master/examples"
//             className={styles.card}
//           >
//             <h2>Examples &rarr;</h2>
//             <p>Discover and deploy boilerplate example Next.js projects.</p>
//           </a>

//           <a
//             href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             className={styles.card}
//           >
//             <h2>Deploy &rarr;</h2>
//             <p>
//               Instantly deploy your Next.js site to a public URL with Vercel.
//             </p>
//           </a>
//         </div>
//       </main>

//       <footer className={styles.footer}>
//         <a
//           href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Powered by{" "}
//           <span className={styles.logo}>
//             <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
//           </span>
//         </a>
//       </footer>
//     </div>
//   );
// }
